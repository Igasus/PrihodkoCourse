// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrihodkoCourse;

namespace PrihodkoCourse.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201226035340_InitWithDiseaseMedicament_2")]
    partial class InitWithDiseaseMedicament_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PrihodkoCourse.Models.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("PrihodkoCourse.Models.DiseaseMedicament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("MedicamentId");

                    b.ToTable("DiseasesMedicaments");
                });

            modelBuilder.Entity("PrihodkoCourse.Models.DiseaseSymptom", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.HasKey("DiseaseId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("DiseasesSymptoms");
                });

            modelBuilder.Entity("PrihodkoCourse.Models.Medicament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StockQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Medicaments");
                });

            modelBuilder.Entity("PrihodkoCourse.Models.Substitute", b =>
                {
                    b.Property<int>("OriginalMedicamentId")
                        .HasColumnType("int");

                    b.Property<int>("SubstituteMedicamentId")
                        .HasColumnType("int");

                    b.Property<float>("DosageMultiplier")
                        .HasColumnType("real");

                    b.HasKey("OriginalMedicamentId", "SubstituteMedicamentId");

                    b.HasIndex("SubstituteMedicamentId");

                    b.ToTable("Substitutes");
                });

            modelBuilder.Entity("PrihodkoCourse.Models.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("PrihodkoCourse.Models.DiseaseMedicament", b =>
                {
                    b.HasOne("PrihodkoCourse.Models.Disease", "Disease")
                        .WithMany("DiseaseMedicaments")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrihodkoCourse.Models.Medicament", "Medicament")
                        .WithMany("MedicamentDiseases")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrihodkoCourse.Models.DiseaseSymptom", b =>
                {
                    b.HasOne("PrihodkoCourse.Models.Disease", "Disease")
                        .WithMany("DiseaseSymptoms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrihodkoCourse.Models.Symptom", "Symptom")
                        .WithMany("SymptomDiseases")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrihodkoCourse.Models.Substitute", b =>
                {
                    b.HasOne("PrihodkoCourse.Models.Medicament", "OriginalMedicament")
                        .WithMany("MedicamentSubstitutes")
                        .HasForeignKey("OriginalMedicamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrihodkoCourse.Models.Medicament", "SubstituteMedicament")
                        .WithMany("SubstituteOfMedicaments")
                        .HasForeignKey("SubstituteMedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
